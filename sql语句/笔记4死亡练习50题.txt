

--建表
--学生表
CREATE TABLE `Student`(
	`s_id` VARCHAR(20),
	`s_name` VARCHAR(20) NOT NULL DEFAULT '',
	`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
	`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
	PRIMARY KEY(`s_id`)
);
--课程表
CREATE TABLE `Course`(
	`c_id`  VARCHAR(20),
	`c_name` VARCHAR(20) NOT NULL DEFAULT '',
	`t_id` VARCHAR(20) NOT NULL,
	PRIMARY KEY(`c_id`)
);
--教师表
CREATE TABLE `Teacher`(
	`t_id` VARCHAR(20),
	`t_name` VARCHAR(20) NOT NULL DEFAULT '',
	PRIMARY KEY(`t_id`)
);
--成绩表
CREATE TABLE `Score`(
	`s_id` VARCHAR(20),
	`c_id`  VARCHAR(20),
	`s_score` INT(3),
	PRIMARY KEY(`s_id`,`c_id`)
);
--插入学生表测试数据
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
insert into Student values('09' , '张三' , '2017-12-20' , '女');
insert into Student values('10' , '李四' , '2017-12-25' , '女');
insert into Student values('11' , '李四' , '2012-06-06' , '女');
insert into Student values('12' , '赵六' , '2013-06-13' , '女');
insert into Student values('13' , '孙七' , '2014-06-01' , '女');
--课程表测试数据
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');

--教师表测试数据
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');

--成绩表测试数据
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);

-- (一)、查询"01"课程比"02"课程成绩高的学生的信息及课程分数	

分析: 1、一个表中两行之间对比要join自己表一次;

 select stu.*,s1.s_score as '01课程分数',s2.s_score as '02课程分数'   from student stu join  score s1 join score s2 on stu.s_id=s1.s_id and stu.s_id=s2.s_id and s1.c_id=01 and s2.c_id=02 and s1.s_score>s2.s_score;
+------+--------+------------+-------+------------+------------+
| s_id | s_name | s_birth    | s_sex | 01课程分数 | 02课程分数 |
+------+--------+------------+-------+------------+------------+
| 02   | 钱电   | 1990-12-21 | 男    |         70 |         60 |
| 04   | 李云   | 1990-08-06 | 男    |         50 |         30 |
+------+--------+------------+-------+------------+------------+
2 rows in set (0.00 sec)

-- 2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数

分析: 1、一个表中两行之间对比要join自己表一次;

 select stu.*,s1.s_score as '01课程分数',s2.s_score as '02课程分数'   from student stu join  score s1 join score s2 on stu.s_id=s1.s_id and stu.s_id=s2.s_id and s1.c_id=01 and s2.c_id=02 and s1.s_score<s2.s_score;
+------+--------+------------+-------+------------+------------+
| s_id | s_name | s_birth    | s_sex | 01课程分数 | 02课程分数 |
+------+--------+------------+-------+------------+------------+
| 01   | 赵雷   | 1990-01-01 | 男    |         80 |         90 |
| 05   | 周梅   | 1991-12-01 | 女    |         76 |         87 |
+------+--------+------------+-------+------------+------------+
2 rows in set (0.00 sec)

3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
 
分析: 要查询的内容: student : s_id s_name   score: avg(s_score)
首先查询:student join score 根据s_id分组 筛选 平均成绩大于60的学生
select stu.s_id,stu.s_name,avg(sc.s_score) from student stu join score sc on stu.s_id = sc.s_id group by sc.s_id having  avg(s_score) >=60 order by avg(sc.s_score)desc;
+------+--------+-----------------+
| s_id | s_name | avg(sc.s_score) |
+------+--------+-----------------+
| 07   | 郑竹   |         93.5000 |
| 01   | 赵雷   |         89.6667 |
| 05   | 周梅   |         81.5000 |
| 03   | 孙风   |         80.0000 |
| 02   | 钱电   |         70.0000 |
+------+--------+-----------------+

4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩
		-- (包括有成绩的和无成绩的)

n1.    查询同时选择了"01"课程和"02"课程的学生的情况;
分析: 
01课程和02课程同时满足那么这就必须两个添加在同一行上
 首先: 不同行之间共同满足一个条件, 则需要将不同的行放在一行上才可以 , 就要join自己表
select * from score sc1 join score sc2 on sc1.s_id=sc2.s_id where sc2.c_id=01 and sc1.c_id=02;
+------+------+---------+------+------+---------+
| s_id | c_id | s_score | s_id | c_id | s_score |
+------+------+---------+------+------+---------+
| 01   | 02   |      90 | 01   | 01   |      80 |
| 02   | 02   |      60 | 02   | 01   |      70 |
| 03   | 02   |      80 | 03   | 01   |      80 |
| 04   | 02   |      30 | 04   | 01   |      50 |
| 05   | 02   |      87 | 05   | 01   |      76 |
+------+------+---------+------+------+---------+

然后得到满足条件的s_id
 select sc1.s_id from score sc1 join score sc2 on sc1.s_id=sc2.s_id where sc2.c_id=01 and sc1.c_id=02;
+------+
| s_id |
+------+
| 01   |
| 02   |
| 03   |
| 04   |
| 05   |
+------+
5 rows in set (0.00 sec)

最后:
select stu.* from student stu where stu.s_id in(  select sc1.s_id from score sc1 join score sc2 on sc1.s_id=sc2.s_id where sc2.c_id=01 and sc1.c_id=02);
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 01   | 赵雷   | 1990-01-01 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
| 05   | 周梅   | 1991-12-01 | 女    |
+------+--------+------------+-------+
5 rows in set (0.00 sec)

子查询:
select stu.* from student stu join score sc1 join score sc2 on sc1.s_id=sc2.s_id and sc1.s_id=stu.s_id and sc2.s_id=stu.s_id where sc2.c_id=01 and sc1.c_id=02;
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 01   | 赵雷   | 1990-01-01 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
| 05   | 周梅   | 1991-12-01 | 女    |
+------+--------+------------+-------+
5 rows in set (0.00 sec)

n2. 查询存在"01课程但可能不存在"02"课程的学生情况(不存在时显示为null)
 
分析: 只要有01课程就行




n4. 查询不存在01课程但存在02课程的学生信息情况
分析: 02课程必须存在01 课程不能存在

select * from score sc1 join score sc2 on c_id = 01 and sc1.s_id = sc2.s_id where sc2.c_id !=02;



n6. 查询在score表中存在成绩的学生信息

分析: 显示有成绩的学生信息
子查询:
首先: 查询score表中有成绩学生的s_id.  根据group by s_id 分组就能得到所有有成绩学习s_id
select s_id from score group by s_id;
然后: 根据s_id添加查询student表
select * from student  where s_id in(select s_id from score group by s_id);
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 01   | 赵雷   | 1990-01-01 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
| 05   | 周梅   | 1991-12-01 | 女    |
| 06   | 吴兰   | 1992-03-01 | 女    |
| 07   | 郑竹   | 1989-07-01 | 女    |
+------+--------+------------+-------+
7 rows in set (0.00 sec)

join连表查询:
select distinct stu. * from student stu join score sc on stu.s_id=sc.s_id;
或者:
select  stu.* from student stu join score sc on stu.s_id=sc.s_id group by sc.s_id;
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 01   | 赵雷   | 1990-01-01 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
| 05   | 周梅   | 1991-12-01 | 女    |
| 06   | 吴兰   | 1992-03-01 | 女    |
| 07   | 郑竹   | 1989-07-01 | 女    |
+------+--------+------------+-------+
7 rows in set (0.00 sec)



n7. 查询所有同学(每一个学生)的学生编号, 学生姓名, 选课总数(count), 所有课程的总成绩(sum)没有成绩的显示为null) 


select st.s_id,st.s_name,count(sc.c_id),sum(sc.s_score) from student st left  join  score sc on st.s_id=sc.s_id group by st.s_id;


n8. 查询'李'姓老师的数量
分析: 模糊查询 like concat('%',#{params.equipmentName},'%')

 select *,count(t_name) from teacher where t_name like concat('%','%李%','%');
+------+--------+---------------+
| t_id | t_name | count(t_name) |
+------+--------+---------------+
| 02   | 李四   |             1 |
+------+--------+---------------+
1 row in set (0.09 sec)


n8. 查询学过张三老师授课的学生的信息

select 
*
from
teacher t1
join
course c
on
t1.t_id=c.t_id
and
t1.t_name='张三'
 join
score s
on
c.c_id=s.c_id
join
student st
on
s.s_id=st.s_id
+------+--------+------+--------+------+------+------+---------+------+--------+------------+-------+
| t_id | t_name | c_id | c_name | t_id | s_id | c_id | s_score | s_id | s_name | s_birth    | s_sex |
+------+--------+------+--------+------+------+------+---------+------+--------+------------+-------+
| 01   | 张三   | 02   | 数学   | 01   | 01   | 02   |      90 | 01   | 赵雷   | 1990-01-01 | 男    |
| 01   | 张三   | 02   | 数学   | 01   | 02   | 02   |      60 | 02   | 钱电   | 1990-12-21 | 男    |
| 01   | 张三   | 02   | 数学   | 01   | 03   | 02   |      80 | 03   | 孙风   | 1990-05-20 | 男    |
| 01   | 张三   | 02   | 数学   | 01   | 04   | 02   |      30 | 04   | 李云   | 1990-08-06 | 男    |
| 01   | 张三   | 02   | 数学   | 01   | 05   | 02   |      87 | 05   | 周梅   | 1991-12-01 | 女    |
| 01   | 张三   | 02   | 数学   | 01   | 07   | 02   |      89 | 07   | 郑竹   | 1989-07-01 | 女    |
+------+--------+------+--------+------+------+------+---------+------+--------+------------+-------+
6 rows in set (0.00 sec)


n9. 查询学全所有课程的学生信息
分析:
首先查询course表 得到一共有多少课程数量: 
select count(c_id) from course;
然后 student表join 连接score表 然后根据 sc.s_id分组 在having筛选学过有总课程数量的学生
select st.* from student st join score sc on st.s_id = sc.s_id  group by sc.s_id having count(sc.c_id) =(select count(c_id) from course);
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 01   | 赵雷   | 1990-01-01 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
+------+--------+------------+-------+
4 rows in set (0.13 sec)

n9-2. 查询没有学全所有课程的学生信息
分析:
首先查询course表 得到一共有多少课程数量: 
select count(c_id) from course;
然后 student表join 连接score表 然后根据 sc.s_id分组 在having筛选学过少于总课程数量的学生
 select st.* from student st left join score sc on st.s_id = sc.s_id  group by st.s_id having count(sc.c_id) not in(select count(c_id) from course);
或
select st.* from student st left join score sc on st.s_id = sc.s_id  group by st.s_id having count(sc.c_id) <(select count(c_id) from course);
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 05   | 周梅   | 1991-12-01 | 女    |
| 06   | 吴兰   | 1992-03-01 | 女    |
| 07   | 郑竹   | 1989-07-01 | 女    |
| 08   | 王菊   | 1990-01-20 | 女    |
| 09   | 张三   | 2017-12-20 | 女    |
| 10   | 李四   | 2017-12-25 | 女    |
| 11   | 李四   | 2012-06-06 | 女    |
| 12   | 赵六   | 2013-06-13 | 女    |
| 13   | 孙七   | 2014-06-01 | 女    |
+------+--------+------------+-------+
9 rows in set (0.00 sec)

n10、查询至少有一门课与学号为"01"的同学所学相同的同学的信息
 分析:
首先查询01学号学生学得所有课程:
select c_id from score where s_id=01
然后 student表join 连接score表 然后根据 sc.c_id有一个符合01学号学生学过课程的条件的
 select st.* from student st join score sc on st.s_id = sc.s_id  where sc.c_id in(select c_id from score where s_id=01) and st.s_id !=01 group by sc.s_id;
或
select st.* from score sc1 join score sc2 on sc1.s_id=01 and sc1.c_id=sc2.c_id join student st on sc2.s_id=st.s_id where sc2.s_id !=01 group by st.s_id;
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 02   | 钱电   | 1990-12-21 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 04   | 李云   | 1990-08-06 | 男    |
| 05   | 周梅   | 1991-12-01 | 女    |
| 06   | 吴兰   | 1992-03-01 | 女    |
| 07   | 郑竹   | 1989-07-01 | 女    |
+------+--------+------------+-------+
6 rows in set (0.00 sec)
			 或
select distinct st.* from score sc1 join score sc2 on sc1.c_id = sc2.c_id and sc1.c_id = 01 join student st on st.s_id = sc2.s_id  order by st.s_id desc ,st.s_birth asc;
+------+--------+------------+-------+
| s_id | s_name | s_birth    | s_sex |
+------+--------+------------+-------+
| 06   | 吴兰   | 1992-03-01 | 女    |
| 05   | 周梅   | 1991-12-01 | 女    |
| 04   | 李云   | 1990-08-06 | 男    |
| 03   | 孙风   | 1990-05-20 | 男    |
| 02   | 钱电   | 1990-12-21 | 男    |
| 01   | 赵雷   | 1990-01-01 | 男    |
+------+--------+------------+-------+
6 rows in set (0.00 sec)

n11. 查询和学号为06的学生所学课程完全一样的学生信息(查询与06学生所学课程不一样的)
1. 首先取第一个表, 这表包好的是所有的06 学生的课程
select * from score s1 where s1.s_id = 06;
+------+------+---------+
| s_id | c_id | s_score |
+------+------+---------+
| 06   | 01   |      31 |
| 06   | 03   |      34 |
+------+------+---------+
2 rows in set (0.00 sec)

2. 取第二个表, 这个表不包含06学生的课程的所有其他学生的所有课程  (这样其他学生有的课程06学生没有的课程在第一张表会显示null值)
select * from score s1 right join score s2 on s1.s_id = 06and s2.s_id !=06
3-1. 将这第一个表right join第二个表, 要求他们的课程c_id相等
select * from score s1 right join score s2 on s1.s_id = 06 and s1.c_id=s2.c_id;
+------+------+---------+------+------+---------+
| s_id | c_id | s_score | s_id | c_id | s_score |
+------+------+---------+------+------+---------+
| 06   | 01   |      31 | 01   | 01   |      80 |
|NULL|NULL|NULL | 01   | 02   |      90 |
| 06   | 03   |      34 | 01   | 03   |      99 |
| 06   | 01   |      31 | 02   | 01   |      70 |
|NULL|NULL|NULL | 02   | 02   |      60 |
| 06   | 03   |      34 | 02   | 03   |      80 |
| 06   | 01   |      31 | 03   | 01   |      80 |
|NULL|NULL|NULL | 03   | 02   |      80 |
| 06   | 03   |      34 | 03   | 03   |      80 |
| 06   | 01   |      31 | 04   | 01   |      50 |
|NULL|NULL|NULL | 04   | 02   |      30 |
| 06   | 03   |      34 | 04   | 03   |      20 |
| 06   | 01   |      31 | 05   | 01   |      76 |
|NULL|NULL|NULL | 05   | 02   |      87 |
| 06   | 01   |      31 | 06   | 01   |      31 |
| 06   | 03   |      34 | 06   | 03   |      34 |
|NULL|NULL|NULL | 07   | 02   |      89 |
| 06   | 03   |      34 | 07   | 03   |      98 |
| 06   | 03   |      34 | 09   | 03   |     100 |
|NULL|NULL|NULL | 10   | 02   |     100 |
+------+------+---------+------+------+---------+
20 rows in set (0.00 sec)

  3-2在把06学生筛选出来并根据s2.s_id进行分组: (得到第二张表的数据是至少有一门跟06学生所学课程一样) 
select  *, s2.s_id , count(s2.s_id) as 所有学生程数, count(s1.s_id) as s1count,(select count(s_id) from score where s_id=06) as 06count from score s1 right join score s2 on s1.s_id = 06 and s1.c_id=s2.c_id where s2.s_id !=06 group by s2.s_id;
+------+------+---------+------+------+---------+------+---------+---------+---------+
| s_id | c_id | s_score | s_id | c_id | s_score | s_id | s2count | s1count | 06count |
+------+------+---------+------+------+---------+------+---------+---------+---------+
| 06   | 01   |      31 | 01   | 01   |      80 | 01   |       3 |       2 |       2 |
| 06   | 01   |      31 | 02   | 01   |      70 | 02   |       3 |       2 |       2 |
| 06   | 01   |      31 | 03   | 01   |      80 | 03   |       3 |       2 |       2 |
| 06   | 01   |      31 | 04   | 01   |      50 | 04   |       3 |       2 |       2 |
| 06   | 01   |      31 | 05   | 01   |      76 | 05   |       2 |       1 |       2 |
|NULL|NULL|NULL | 07   | 02   |      89 | 07   |       2 |       1 |       2 |
| 06   | 03   |      34 | 09   | 03   |    100 | 09   |       1 |       1 |       2 |
|NULL|NULL|NULL | 10   | 02   |    100 | 10   |       1 |       0 |       2 |
+------+------+---------+------+------+---------+------+--------------+---------+---------+
8 rows in set (0.01 sec)
4.判断 right join 后的其他学生的课程数量, 如果数量与06相等, 那么就说明与06学生课程数量一样, 在判断null的列
4-1. 再次having筛选其他学生课程数与06学生的课程数是否相等因为s2中的s_id可能会有null不相等的就会排除
select   s2.s_id , count(s2.s_id) as s2count, count(s1.s_id) as s1count,(select count(s_id) from score where s_id=06) as 06count from score s1 right join score s2 on s1.s_id = 06 and s1.c_id=s2.c_id where s2.s_id !=06 group by s2.s_id having count(s2.s_id) =(select count(s_id) from score where s_id=06);
+------+---------+---------+---------+
| s_id | s2count | s1count | 06count |
+------+---------+---------+---------+
| 05   |       2 |       1 |       2 |
| 07   |       2 |       1 |       2 |
+------+---------+---------+---------+
2 rows in set (0.00 sec)

4-2. 最后再筛选条件s2中的s_id要等于s1中的s_id 因为 s1表中得s_id会有null值
select  s2.s_id , count(s2.s_id) as s2count, count(s1.s_id) as s1count,(select count(s_id) from score where s_id=06) as 06count 
from score s1 right join score s2 on s1.s_id = 06 and s1.c_id=s2.c_id where s2.s_id !=06 group by s2.s_id having count(s2.s_id) =(select count(s_id) from score where s_id=06 and count(s2.s_id)= count(s1.s_id);
Empty set (0.00 sec)

n14、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

分析: 1. 每个学生 group by 姓名 ,平均成绩
        2. 找到两门不及格的, 用count计数
        3. 不及格的是小于60 分的, 用case when 配合count 计算 
select st.s_id, st.s_name, avg(sc.s_score)
from 
score sc join student st on  sc.s_id=st.s_id group by sc.s_id having count(case when  sc.s_score <60 then 1 else null end) >= 2;
 或者join 连自己表查询 (两个条件要在同一行就join一次自己表):

分析: 1. join自己表然后去除课程相同的:
 select * from score sc join score sc1 on sc.s_id = sc1.s_id;
+------+------+---------+------+------+---------+
| s_id | c_id | s_score | s_id | c_id | s_score |
+------+------+---------+------+------+---------+
| 01   | 01   |      80 | 01   | 01   |      80 |
| 01   | 01   |      80 | 01   | 02   |      90 |
| 01   | 01   |      80 | 01   | 03   |      99 |
| 01   | 02   |      90 | 01   | 01   |      80 |
| 01   | 02   |      90 | 01   | 02   |      90 |
| 01   | 02   |      90 | 01   | 03   |      99 |
| 01   | 03   |      99 | 01   | 01   |      80 |
| 01   | 03   |      99 | 01   | 02   |      90 |
| 01   | 03   |      99 | 01   | 03   |      99 |
| 02   | 01   |      70 | 02   | 01   |      70 |
| 02   | 01   |      70 | 02   | 02   |      60 |
| 02   | 01   |      70 | 02   | 03   |      80 |
| 02   | 02   |      60 | 02   | 01   |      70 |
| 02   | 02   |      60 | 02   | 02   |      60 |
| 02   | 02   |      60 | 02   | 03   |      80 |
| 02   | 03   |      80 | 02   | 01   |      70 |
| 02   | 03   |      80 | 02   | 02   |      60 |
| 02   | 03   |      80 | 02   | 03   |      80 |
| 03   | 01   |      80 | 03   | 01   |      80 |
| 03   | 01   |      80 | 03   | 02   |      80 |
| 03   | 01   |      80 | 03   | 03   |      80 |
| 03   | 02   |      80 | 03   | 01   |      80 |
| 03   | 02   |      80 | 03   | 02   |      80 |
| 03   | 02   |      80 | 03   | 03   |      80 |
| 03   | 03   |      80 | 03   | 01   |      80 |
| 03   | 03   |      80 | 03   | 02   |      80 |
| 03   | 03   |      80 | 03   | 03   |      80 |
| 04   | 01   |      50 | 04   | 01   |      50 |
| 04   | 01   |      50 | 04   | 02   |      30 |
| 04   | 01   |      50 | 04   | 03   |      20 |
| 04   | 02   |      30 | 04   | 01   |      50 |
| 04   | 02   |      30 | 04   | 02   |      30 |
| 04   | 02   |      30 | 04   | 03   |      20 |
| 04   | 03   |      20 | 04   | 01   |      50 |
| 04   | 03   |      20 | 04   | 02   |      30 |
| 04   | 03   |      20 | 04   | 03   |      20 |
| 05   | 01   |      76 | 05   | 01   |      76 |
| 05   | 01   |      76 | 05   | 02   |      87 |
| 05   | 02   |      87 | 05   | 01   |      76 |
| 05   | 02   |      87 | 05   | 02   |      87 |
| 06   | 01   |      31 | 06   | 01   |      31 |
| 06   | 01   |      31 | 06   | 03   |      34 |
| 06   | 03   |      34 | 06   | 01   |      31 |
| 06   | 03   |      34 | 06   | 03   |      34 |
| 07   | 02   |      89 | 07   | 02   |      89 |
| 07   | 02   |      89 | 07   | 03   |      98 |
| 07   | 03   |      98 | 07   | 02   |      89 |
| 07   | 03   |      98 | 07   | 03   |      98 |
| 09   | 03   |     100 | 09   | 03   |     100 |
| 10   | 02   |     100 | 10   | 02   |     100 |
+------+------+---------+------+------+---------+
50 rows in set (0.00 sec)

2). 去除课程c_id一样的的数据
 select * from score sc left join score sc1 on sc.s_id = sc1.s_id and sc.c_id !=sc1.c_id;
+------+------+---------+------+------+---------+
| s_id | c_id | s_score | s_id | c_id | s_score |
+------+------+---------+------+------+---------+
| 01   | 01   |      80 | 01   | 02   |      90 |
| 01   | 01   |      80 | 01   | 03   |      99 |
| 01   | 02   |      90 | 01   | 01   |      80 |
| 01   | 02   |      90 | 01   | 03   |      99 |
| 01   | 03   |      99 | 01   | 01   |      80 |
| 01   | 03   |      99 | 01   | 02   |      90 |
| 02   | 01   |      70 | 02   | 02   |      60 |
| 02   | 01   |      70 | 02   | 03   |      80 |
| 02   | 02   |      60 | 02   | 01   |      70 |
| 02   | 02   |      60 | 02   | 03   |      80 |
| 02   | 03   |      80 | 02   | 01   |      70 |
| 02   | 03   |      80 | 02   | 02   |      60 |
| 03   | 01   |      80 | 03   | 02   |      80 |
| 03   | 01   |      80 | 03   | 03   |      80 |
| 03   | 02   |      80 | 03   | 01   |      80 |
| 03   | 02   |      80 | 03   | 03   |      80 |
| 03   | 03   |      80 | 03   | 01   |      80 |
| 03   | 03   |      80 | 03   | 02   |      80 |
| 04   | 01   |      50 | 04   | 02   |      30 |
| 04   | 01   |      50 | 04   | 03   |      20 |
| 04   | 02   |      30 | 04   | 01   |      50 |
| 04   | 02   |      30 | 04   | 03   |      20 |
| 04   | 03   |      20 | 04   | 01   |      50 |
| 04   | 03   |      20 | 04   | 02   |      30 |
| 05   | 01   |      76 | 05   | 02   |      87 |
| 05   | 02   |      87 | 05   | 01   |      76 |
| 06   | 01   |      31 | 06   | 03   |      34 |
| 06   | 03   |      34 | 06   | 01   |      31 |
| 07   | 02   |      89 | 07   | 03   |      98 |
| 07   | 03   |      98 | 07   | 02   |      89 |
+------+------+---------+------+------+---------+
30 rows in set (0.00 sec)

然后根据条件两门都不及格过滤得到森这样就能得到学生学号和平均成绩:
 select sc1.s_id,avg(sc.s_score) from score sc join score sc1 on sc.s_id = sc1.s_id and sc.c_id !=sc1.c_id  where sc.s_score <60 and sc1.s_score <60 group by sc.s_id;
+------+-----------------+
| s_id | avg(sc.s_score) |
+------+-----------------+
| 04   |         33.3333 |
| 06   |         32.5000 |
+------+-----------------+
2 rows in set (0.00 sec)

最后join连接 student表 得到学生姓名:
 select st.s_name, st.s_id ,avg(s_score) from score join student st on st.s_id= score.s_id where st.s_id in(select sc1.s_id from score sc join score sc1 on sc.s_id = sc1.s_id and sc.c_id !=sc1.c_id  where sc.s_score <60 and sc1.s_score <60 group by sc.s_id) group by st.s_id;
+--------+------+--------------+
| s_name | s_id | avg(s_score) |
+--------+------+--------------+
| 李云   | 04   |      33.3333 |
| 吴兰   | 06   |      32.5000 |
+--------+------+--------------+
2 rows in set (0.07 sec)
2 rows in set (0.00 sec)










